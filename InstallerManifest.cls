Include %occInclude

/// Set Up Cache
Class VX130.Installer
{

XData DQManifest [ XMLNamespace = INSTALLER ]
{
<Manifest>
    <Namespace Name="%SYS" Create="no" >
	 <Invoke Class="VX130.Installer" Method="AddConsole" CheckStatus="0" />
	 <SystemSetting Name="Config.config.MaxServers" Value="30" />
	 <SystemSetting Name="Config.config.MaxServerConn" Value="30" />
	 <SystemSetting Name="Config.config.routines" Value="1023" />
	 <SystemSetting Name="Config.config.globals8kb" Value="128000" />
	 <SystemSetting Name="Config.config.bbsiz" Value="544288" />
	 <SystemSetting Name="Config.config.gmheap" Value="2184000" />
	 <SystemSetting Name="Config.config.locksiz" Value="235929600" />
	 <SystemSetting Name="Config.Startup.DefaultPort" Value="51773" />
	 <Invoke Class="VX130.Installer" Method="ImportZSTART" CheckStatus="0" />
    </Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "DQManifest")
}


ClassMethod AddConsole() As %Status
{
	#dim console As Security.Services
	set sc=$$$OK
	try
	{
		set console=##class(Security.Services).%OpenId("%service_telnet")
		if $IsObject(console)
		{
			set console.Enabled=1
			set sc=console.%Save()
		}
	}
	catch
	{
		
	}
	quit sc
}

ClassMethod ImportZSTART() As %Status
{
	Set Status=$$$OK
	Do $system.OBJ.Load("C:\IRISKit\%ZSTART.mac","ck")
	Quit Status
}
	
}